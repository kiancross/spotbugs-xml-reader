/*
 * Copyright (C) 2021 Kian Cross
 */

plugins {
  id "application"
  id "jacoco"
  id "checkstyle"
  id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "commons-cli:commons-cli:1.5.0"
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.0"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

application {
  mainClass = "com.kiancross.spotbugsxmlreader.App"
}

jacocoTestReport {
  dependsOn test 
  reports {
    xml.enabled true
    html.enabled true
  }
}

def getGitTag = { ->
  def stdout = new ByteArrayOutputStream()

  exec {
    commandLine 'git', 'tag', '--points-at', 'HEAD'
    ignoreExitValue true
    standardOutput = stdout
  }

  return stdout.toString().trim()
}

// https://stackoverflow.com/a/35041457
def getGitHash = { ->
  def stdout = new ByteArrayOutputStream()

  exec {
    commandLine 'git', 'rev-parse', '--short', 'HEAD'
    ignoreExitValue true
    standardOutput = stdout
  }

  return stdout.toString().trim()
}

def getVersion = { ->
  def tag = getGitTag()
  if (tag.startsWith("v")) {
    return tag
  }

  def hash = getGitHash()
  if (!hash.equals("")) {
    return hash
  }

  return "unknown"
}

def version = getVersion()

shadowJar {
  minimize()
  archiveBaseName.set(project.name)
  archiveClassifier.set("")
  archiveVersion.set(version)
}

tasks.register("createProperties") {
  doLast {
    mkdir "$buildDir/resources/main/"
    def f = file("$buildDir/resources/main/version.txt")
    f.createNewFile()
    f.text = version
  }
}

classes {
  dependsOn createProperties
}

tasks.named("test") {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

tasks.withType(AbstractArchiveTask) {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}
